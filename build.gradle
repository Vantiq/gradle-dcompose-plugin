import pl.allegro.tech.build.axion.release.ReleaseTask

plugins {
    id("com.vantiq.gradle-dcompose-plugin") version "0.17.2"
    id("com.gradle.plugin-publish") version "1.3.0"
    id("pl.allegro.tech.build.axion-release") version "1.13.14"
}
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

group 'com.vantiq'
scmVersion {
    versionIncrementer 'incrementMinor'
}
version = project.findProperty('publishVersion') ?: scmVersion.version

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = '8.0.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

sourceCompatibility = targetCompatibility = 1.8

dependencies {
    implementation gradleApi()
    testImplementation 'com.netflix.nebula:nebula-test:10.6.1'
}

idea {
    module {
        downloadSources = true
    }
}

java {
    withSourcesJar()
}

artifacts {
    archives jar
    archives sourcesJar
}

dcompose {
    dockerDaemon {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.daemon'
        privileged = true
        exposedPorts = ['1500']
        portBindings = ['2375', '1500']
        env = ['DOCKER_TLS_CERTDIR=']
    }
    dockerRegistry {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.registry'
        aliases = ['testreg']
    }
    dockerHubMirror {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.hub'
        aliases = ['hub']
    }
}
createDockerDaemonContainer.outputs.upToDateWhen { false }
createDockerRegistryContainer.outputs.upToDateWhen { false }

private Map getDockerConfig() {
    def findHostProps = [:]
    def dockerHostIp = project.findProperty('dockerHostIp')
    if (dockerHostIp) {
        findHostProps.hostIp = dockerHostIp
    }
    return [
            dockerHost: dcompose.dockerDaemon.dockerHost, 
            dockerPort: dcompose.dockerDaemon.findHostPort(findHostProps, 2375),
            networkTestPort: dcompose.dockerDaemon.findHostPort(findHostProps, 1500)
    ]
}

tasks.register('patchRelease', ReleaseTask) {
    doFirst {
        scmVersion {
            versionIncrementer 'incrementPatch'
        }
    }
}

tasks.register('setupTest') {
    doFirst {
        def dockerConfig = getDockerConfig()
        def dockerHost = dockerConfig.dockerHost
        def dockerPort = dockerConfig.dockerPort
        def networkTestPort = dockerConfig.networkTestPort
        println "-DignoreDeprecations=true -DDOCKER_HOST=tcp://$dockerHost:$dockerPort -DDOCKER_TLS_VERIFY=0 " +
                "-DnetworkCreateTaskSpec.testUrl=http://$dockerHost:$networkTestPort -Dtestreg.url=testreg:5000 " +
                "-Dtestreg.user=reguser -Dtestreg.pass=regpass"
    }
    
    dependsOn startDockerDaemonContainer, startDockerRegistryContainer, startDockerHubMirrorContainer
}

tasks.register('shutdownTest') {
    finalizedBy removeDockerDaemonContainer, removeDockerRegistryContainer, removeDockerHubMirrorContainer
}

test {
    inputs.property 'docker-image', { dcompose.dockerDaemon.imageId }
    maxParallelForks = (int) Math.round(Runtime.runtime.availableProcessors() / 2)

    systemProperty 'testreg.url', "testreg:5000"
    systemProperty 'testreg.user', 'reguser'
    systemProperty 'testreg.pass', 'regpass'

    if(project.hasProperty('gradleVersion')) {
        systemProperty 'gradleVersion', gradleVersion
    }

    useJUnitPlatform {
        includeEngines 'spock'
    }
    
    // ignore deprecation warnings found by nebula-test
    systemProperty 'ignoreDeprecations', 'true'

    maxHeapSize = '196m'

    doFirst {
        def dockerConfig = getDockerConfig()
        systemProperty 'DOCKER_HOST', "tcp://${dockerConfig.dockerHost}:${dockerConfig.dockerPort}"
        systemProperty 'DOCKER_TLS_VERIFY', '0'
        systemProperty 'networkCreateTaskSpec.testUrl', 
                "http://${dockerConfig.dockerHost}:${dockerConfig.networkTestPort}"
    }

    doLast {
        systemProperties.remove 'DOCKER_HOST'
        systemProperties.remove 'DOCKER_TLS_VERIFY'
        systemProperties.remove 'networkCreateTaskSpec.testUrl'
    }

    dependsOn startDockerDaemonContainer, startDockerRegistryContainer, startDockerHubMirrorContainer
    finalizedBy removeDockerDaemonContainer, removeDockerRegistryContainer, removeDockerHubMirrorContainer
}

gradlePlugin {
    website = 'https://github.com/Vantiq/gradle-dcompose-plugin'
    vcsUrl = 'https://github.com/Vantiq/gradle-dcompose-plugin'
    description = 'Plugin for automatically managing Docker container lifecycles in Gradle. This plugin is a fork of https://github.com/chrisgahlert/gradle-dcompose-plugin'

    plugins {
        dcomposePlugin {
            //noinspection GroovyAssignabilityCheck
            id = 'com.vantiq.gradle-dcompose-plugin'
            //noinspection GroovyAssignabilityCheck
            displayName = 'Gradle dcompose Plugin (Vantiq Fork)'
            description = 'Plugin for automatically managing Docker container lifecycles in Gradle. This plugin is a fork of https://github.com/chrisgahlert/gradle-dcompose-plugin'
            //noinspection GroovyAssignabilityCheck
            implementationClass = 'com.vantiq.gradledcomposeplugin.DcomposePlugin'
            tags.set(['docker', 'management', 'application', 'container', 'lifecycle', 'compose'])
        }
    }
}
publishPlugins.dependsOn test
