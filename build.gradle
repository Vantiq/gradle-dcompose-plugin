group 'com.chrisgahlert'

if(project.hasProperty('publishVersion') && publishVersion) {
    version = publishVersion
}

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "com.gradle:build-scan-plugin:1.8"
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
        classpath 'gradle.plugin.com.chrisgahlert:gradle-dcompose-plugin:0.10.0'
    }
}

apply plugin: 'com.gradle.build-scan'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

repositories {
    mavenCentral()
}

sourceCompatibility = targetCompatibility = 1.6

dependencies {
    compile gradleApi()
    testCompile 'com.netflix.nebula:nebula-test:6.3.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

dcompose {
    dockerDaemon {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.daemon'
        privileged = true
        exposedPorts = ['1500']
        portBindings = ['2375', '1500']
    }
    dockerRegistry {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.registry'
        aliases = ['testreg']
    }
    dockerHubMirror {
        baseDir = file('src/test/docker/')
        dockerFilename = 'Dockerfile.hub'
        aliases = ['hub']
    }
}
createDockerDaemonContainer.outputs.upToDateWhen { false }
createDockerRegistryContainer.outputs.upToDateWhen { false }

test {
    inputs.property 'docker-image', { dcompose.dockerDaemon.imageId }
    maxParallelForks = Math.round(Runtime.runtime.availableProcessors() / 2)

    systemProperty 'testreg.url', "testreg:5000"
    systemProperty 'testreg.user', 'reguser'
    systemProperty 'testreg.pass', 'regpass'

    if(project.hasProperty('gradleVersion')) {
        systemProperty 'gradleVersion', gradleVersion
    }

    // ignore deprecation warnings found by nebula-test
    systemProperty 'ignoreDeprecations', 'true'

    maxHeapSize = '196m'

    doFirst {
        def dockerHost = dcompose.dockerDaemon.dockerHost
        def dockerPort = dcompose.dockerDaemon.findHostPort(2375)
        def networkTestPort = dcompose.dockerDaemon.findHostPort(1500)

        systemProperty 'DOCKER_HOST', "tcp://$dockerHost:$dockerPort"
        systemProperty 'DOCKER_TLS_VERIFY', '0'
        systemProperty 'networkCreateTaskSpec.testUrl', "http://$dockerHost:$networkTestPort"
    }

    doLast {
        systemProperties.remove 'DOCKER_HOST'
        systemProperties.remove 'DOCKER_TLS_VERIFY'
        systemProperties.remove 'networkCreateTaskSpec.testUrl'
    }

    dependsOn startDockerDaemonContainer, startDockerRegistryContainer, startDockerHubMirrorContainer
    finalizedBy removeDockerDaemonContainer, removeDockerRegistryContainer, removeDockerHubMirrorContainer
}

pluginBundle {
    website = vcsUrl = 'http://github.com/chrisgahlert/gradle-dcompose-plugin'
    description = 'Plugin for automatically managing Docker container lifecycles in Gradle. This plugin was inspired by the gradle-docker-plugin from Benjamin Muschko and by docker-compose'
    tags = ['docker', 'management', 'application', 'container', 'lifecycle', 'compose']

    plugins {
        dcomposePlugin {
            id = 'com.chrisgahlert.gradle-dcompose-plugin'
            displayName = 'Gradle dcompose Plugin'
        }
    }
}
publishPlugins.dependsOn test
