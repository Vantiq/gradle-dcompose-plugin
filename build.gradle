group 'com.chrisgahlert'

if(project.hasProperty('publishVersion') && publishVersion) {
    version = publishVersion
}

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "com.gradle:build-scan-plugin:1.0"
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.1'
        classpath 'gradle.plugin.com.chrisgahlert:gradle-dcompose-plugin:0.4.0'
    }
}

apply plugin: 'com.gradle.build-scan'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

repositories {
    mavenCentral()
}

sourceCompatibility = targetCompatibility = 1.6

configurations {
    all {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy-all:${GroovySystem.getVersion()}"
        }
    }
}

dependencies {
    compile gradleApi()

    if(GradleVersion.current().compareTo(GradleVersion.version('2.6')) < 0) {
        testCompile 'com.netflix.nebula:nebula-test:2.2.2'
    } else if(GradleVersion.current().compareTo(GradleVersion.version('2.8')) < 0) {
        testCompile 'com.netflix.nebula:nebula-test:3.1.0'
    } else {
        testCompile 'com.netflix.nebula:nebula-test:4.2.2'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

dcompose {
    dockerDaemon {
        image = 'docker:1.12.1-dind'
        privileged = true
        portBindings = ['2375']
    }
}
createDockerDaemonContainer.outputs.upToDateWhen { false }

test {
    inputs.property 'docker-image', dcompose.dockerDaemon.image
    maxParallelForks = Math.round(Runtime.runtime.availableProcessors() / 2)

    doFirst {
        def dockerHost = dcompose.dockerDaemon.dockerHost
        def dockerPort = dcompose.dockerDaemon.findHostPort(2375)

        systemProperty 'DOCKER_HOST', "tcp://$dockerHost:$dockerPort"
        systemProperty 'DOCKER_TLS_VERIFY', '0'
    }

    doLast {
        systemProperties.remove 'DOCKER_HOST'
        systemProperties.remove 'DOCKER_TLS_VERIFY'
    }

    dependsOn startDockerDaemonContainer
    finalizedBy removeDockerDaemonContainer
}

pluginBundle {
    website = vcsUrl = 'http://github.com/chrisgahlert/gradle-dcompose-plugin'
    description = 'Plugin for automatically managing Docker container lifecycles in Gradle. This plugin was inspired by the gradle-docker-plugin from Benjamin Muschko and by docker-compose'
    tags = ['docker', 'management', 'application', 'container', 'lifecycle', 'compose']

    plugins {
        dcomposePlugin {
            id = 'com.chrisgahlert.gradle-dcompose-plugin'
            displayName = 'Gradle dcompose Plugin'
        }
    }
}
publishPlugins.dependsOn test
